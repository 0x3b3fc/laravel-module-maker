<?php

namespace {{moduleNamespace}}\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use {{moduleNamespace}}\Models\{{module}};
use {{moduleNamespace}}\Http\Resources\{{module}}Resource;
use {{moduleNamespace}}\Http\Resources\{{module}}Collection;

class {{module}}ApiController
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): JsonResponse
    {
        $query = {{module}}::query();

        // Search
        if ($request->has('search')) {
            $search = $request->input('search');
            $query->where(function ($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('description', 'like', "%{$search}%");
            });
        }

        // Filter by status
        if ($request->has('is_active')) {
            $query->where('is_active', $request->boolean('is_active'));
        }

        // Sorting
        $sortField = $request->input('sort', 'created_at');
        $sortDirection = $request->input('direction', 'desc');
        $query->orderBy($sortField, $sortDirection);

        // Pagination
        $perPage = $request->input('per_page', 15);
        ${{moduleLower}}s = $query->paginate($perPage);

        return response()->json(new {{module}}Collection(${{moduleLower}}s));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'is_active' => 'boolean',
        ]);

        ${{moduleLower}} = {{module}}::create($validated);

        return response()->json([
            'message' => '{{module}} created successfully.',
            'data' => new {{module}}Resource(${{moduleLower}}),
        ], 201);
    }

    /**
     * Display the specified resource.
     */
    public function show({{module}} ${{moduleLower}}): JsonResponse
    {
        return response()->json([
            'data' => new {{module}}Resource(${{moduleLower}}),
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, {{module}} ${{moduleLower}}): JsonResponse
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'is_active' => 'boolean',
        ]);

        ${{moduleLower}}->update($validated);

        return response()->json([
            'message' => '{{module}} updated successfully.',
            'data' => new {{module}}Resource(${{moduleLower}}),
        ]);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{module}} ${{moduleLower}}): JsonResponse
    {
        ${{moduleLower}}->delete();

        return response()->json([
            'message' => '{{module}} deleted successfully.',
        ]);
    }
}

